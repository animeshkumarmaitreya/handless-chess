{"ast":null,"code":"import { TeamType } from \"../../Types\";\nimport { Position } from \"../../models\";\nimport { tileIsOccupied, tileIsOccupiedByOpponent } from \"./GeneralRules\";\nexport const pawnMove = (initialPosition, desiredPosition, team, boardState) => {\n  const specialRow = team === TeamType.OUR ? 1 : 6;\n  const pawnDirection = team === TeamType.OUR ? 1 : -1;\n\n  //MOVEMENT LOGIC\n  if (initialPosition.x === desiredPosition.x && initialPosition.y === specialRow && desiredPosition.y - initialPosition.y === 2 * pawnDirection) {\n    if (!tileIsOccupied(desiredPosition, boardState) && !tileIsOccupied(new Position(desiredPosition.x, desiredPosition.y - pawnDirection), boardState)) {\n      return true;\n    }\n  } else if (initialPosition.x === desiredPosition.x && desiredPosition.y - initialPosition.y === pawnDirection) {\n    if (!tileIsOccupied(desiredPosition, boardState)) {\n      return true;\n    }\n  }\n  //ATTACK LOGIC\n  else if (desiredPosition.x - initialPosition.x === -1 && desiredPosition.y - initialPosition.y === pawnDirection) {\n    //ATTACK IN UPPER OR BOTTOM LEFT CORNER\n    if (tileIsOccupiedByOpponent(desiredPosition, boardState, team)) {\n      return true;\n    }\n  } else if (desiredPosition.x - initialPosition.x === 1 && desiredPosition.y - initialPosition.y === pawnDirection) {\n    //ATTACK IN THE UPPER OR BOTTOM RIGHT CORNER\n    if (tileIsOccupiedByOpponent(desiredPosition, boardState, team)) {\n      return true;\n    }\n  }\n  return false;\n};\nexport const getPossiblePawnMoves = (pawn, boardState) => {\n  const possibleMoves = [];\n  const specialRow = pawn.team === TeamType.OUR ? 1 : 6;\n  const pawnDirection = pawn.team === TeamType.OUR ? 1 : -1;\n  const normalMove = new Position(pawn.position.x, pawn.position.y + pawnDirection);\n  const specialMove = new Position(normalMove.x, normalMove.y + pawnDirection);\n  const upperLeftAttack = new Position(pawn.position.x - 1, pawn.position.y + pawnDirection);\n  const upperRightAttack = new Position(pawn.position.x + 1, pawn.position.y + pawnDirection);\n  const leftPosition = new Position(pawn.position.x - 1, pawn.position.y);\n  const rightPosition = new Position(pawn.position.x + 1, pawn.position.y);\n  if (!tileIsOccupied(normalMove, boardState)) {\n    possibleMoves.push(normalMove);\n    if (pawn.position.y === specialRow && !tileIsOccupied(specialMove, boardState)) {\n      possibleMoves.push(specialMove);\n    }\n  }\n  if (tileIsOccupiedByOpponent(upperLeftAttack, boardState, pawn.team)) {\n    possibleMoves.push(upperLeftAttack);\n  } else if (!tileIsOccupied(upperLeftAttack, boardState)) {\n    const leftPiece = boardState.find(p => p.samePosition(leftPosition));\n    if (leftPiece != null && leftPiece.enPassant) {\n      possibleMoves.push(upperLeftAttack);\n    }\n  }\n  if (tileIsOccupiedByOpponent(upperRightAttack, boardState, pawn.team)) {\n    possibleMoves.push(upperRightAttack);\n  } else if (!tileIsOccupied(upperRightAttack, boardState)) {\n    const rightPiece = boardState.find(p => p.samePosition(rightPosition));\n    if (rightPiece != null && rightPiece.enPassant) {\n      possibleMoves.push(upperRightAttack);\n    }\n  }\n  return possibleMoves;\n};","map":{"version":3,"names":["TeamType","Position","tileIsOccupied","tileIsOccupiedByOpponent","pawnMove","initialPosition","desiredPosition","team","boardState","specialRow","OUR","pawnDirection","x","y","getPossiblePawnMoves","pawn","possibleMoves","normalMove","position","specialMove","upperLeftAttack","upperRightAttack","leftPosition","rightPosition","push","leftPiece","find","p","samePosition","enPassant","rightPiece"],"sources":["/home/animesh/Desktop/SummerDev/Chess-40/src/Referee/rules/PawnRules.ts"],"sourcesContent":["import { TeamType } from \"../../Types\";\nimport { Piece, Position } from \"../../models\";\nimport { tileIsOccupied, tileIsOccupiedByOpponent } from \"./GeneralRules\";\nimport { Pawn } from \"../../models/Pawn\";\n\nexport const pawnMove = (initialPosition: Position, desiredPosition: Position, team: TeamType, boardState: Piece[]): boolean => {\n  const specialRow = team === TeamType.OUR ? 1 : 6;\n  const pawnDirection = team === TeamType.OUR ? 1 : -1;\n\n  //MOVEMENT LOGIC\n  if (\n    initialPosition.x === desiredPosition.x &&\n    initialPosition.y === specialRow &&\n    desiredPosition.y - initialPosition.y === 2 * pawnDirection\n  ) {\n    if (\n      !tileIsOccupied(desiredPosition, boardState) &&\n      !tileIsOccupied(\n        new Position(desiredPosition.x, desiredPosition.y - pawnDirection),\n        boardState\n      )\n    ) {\n      return true;\n    }\n  } else if (\n    initialPosition.x === desiredPosition.x &&\n    desiredPosition.y - initialPosition.y === pawnDirection\n  ) {\n    if (!tileIsOccupied(desiredPosition, boardState)) {\n      return true;\n    }\n  }\n  //ATTACK LOGIC\n  else if (\n    desiredPosition.x - initialPosition.x === -1 &&\n    desiredPosition.y - initialPosition.y === pawnDirection\n  ) {\n    //ATTACK IN UPPER OR BOTTOM LEFT CORNER\n    if (tileIsOccupiedByOpponent(desiredPosition, boardState, team)) {\n      return true;\n    }\n  } else if (\n    desiredPosition.x - initialPosition.x === 1 &&\n    desiredPosition.y - initialPosition.y === pawnDirection\n  ) {\n    //ATTACK IN THE UPPER OR BOTTOM RIGHT CORNER\n    if (tileIsOccupiedByOpponent(desiredPosition, boardState, team)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexport const getPossiblePawnMoves = (pawn: Piece, boardState: Piece[]): Position[] => {\n  const possibleMoves: Position[] = [];\n\n  const specialRow = pawn.team === TeamType.OUR ? 1 : 6;\n  const pawnDirection = pawn.team === TeamType.OUR ? 1 : -1;\n\n  const normalMove = new Position(pawn.position.x, pawn.position.y + pawnDirection);\n  const specialMove = new Position(normalMove.x, normalMove.y + pawnDirection);\n  const upperLeftAttack = new Position(pawn.position.x - 1, pawn.position.y + pawnDirection);\n  const upperRightAttack = new Position(pawn.position.x + 1, pawn.position.y + pawnDirection);\n  const leftPosition = new Position(pawn.position.x - 1, pawn.position.y);\n  const rightPosition = new Position(pawn.position.x + 1, pawn.position.y);\n\n  if (!tileIsOccupied(normalMove, boardState)) {\n    possibleMoves.push(normalMove);\n\n    if (pawn.position.y === specialRow &&\n      !tileIsOccupied(specialMove, boardState)) {\n      possibleMoves.push(specialMove)\n    }\n  }\n\n  if (tileIsOccupiedByOpponent(upperLeftAttack, boardState, pawn.team)) {\n    possibleMoves.push(upperLeftAttack);\n  } else if (!tileIsOccupied(upperLeftAttack, boardState)) {\n    const leftPiece = boardState.find(p => p.samePosition(leftPosition));\n    if (leftPiece != null && (leftPiece as Pawn).enPassant) {\n      possibleMoves.push(upperLeftAttack);\n    }\n  }\n\n  if (tileIsOccupiedByOpponent(upperRightAttack, boardState, pawn.team)) {\n    possibleMoves.push(upperRightAttack);\n  } else if (!tileIsOccupied(upperRightAttack, boardState)) {\n    const rightPiece = boardState.find(p => p.samePosition(rightPosition));\n    if (rightPiece != null && (rightPiece as Pawn).enPassant) {\n      possibleMoves.push(upperRightAttack);\n    }\n  }\n\n  return possibleMoves;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}