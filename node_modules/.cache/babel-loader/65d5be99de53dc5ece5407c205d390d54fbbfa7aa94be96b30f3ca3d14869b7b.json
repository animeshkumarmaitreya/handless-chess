{"ast":null,"code":"var _jsxFileName = \"/home/animesh/Desktop/SummerDev/Chess-40/src/Components/Referee/referee.tsx\",\n  _s = $RefreshSig$();\nimport axios from 'axios';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { initialBoard } from \"../../Constants\";\nimport { Piece, Position } from \"../../models\";\nimport { bishopMove, kingMove, knightMove, pawnMove, queenMove, rookMove } from \"../../Referee/rules/\";\nimport { PieceType, TeamType } from \"../../Types\";\nimport Chessboard from \"../Chessboard/chessboard\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Referee = () => {\n  _s();\n  var iniboard = initialBoard.clone();\n  const [isLoaded, setIsLoaded] = useState(false);\n  useEffect(() => {\n    const ExpressScript = async () => {\n      try {\n        const response = await axios.post('https://chess-40-backend.onrender.com/chess');\n        const response2 = await axios.post('https://chess-40-backend.onrender.com/turn');\n        let t = response2.data[0][\"Turn\"];\n        t *= 2;\n        if (t % 4) t--;\n        iniboard.updateTurns(t + 1);\n        if (response.data) {\n          let x = response.data;\n          var W_Pawn = [];\n          var W_Bishop = [];\n          var W_Rook = [];\n          var W_Knight = [];\n          var W_King = -1;\n          var W_Queen = [];\n          var B_Pawn = [];\n          var B_Bishop = [];\n          var B_Rook = [];\n          var B_Knight = [];\n          var B_King = -1;\n          var B_Queen = [];\n          for (const key in x) {\n            if (Object.prototype.hasOwnProperty.call(x, key)) {\n              switch (x[key][\"Element\"]) {\n                case \"B_Pawn\":\n                  B_Pawn.push(x[key][\"PositionX\"] * 10 + x[key][\"PositionY\"]);\n                  break;\n                case \"W_Pawn\":\n                  W_Pawn.push(x[key][\"PositionX\"] * 10 + x[key][\"PositionY\"]);\n                  break;\n                case \"B_Bishop\":\n                  B_Bishop.push(x[key][\"PositionX\"] * 10 + x[key][\"PositionY\"]);\n                  break;\n                case \"W_Bishop\":\n                  W_Bishop.push(x[key][\"PositionX\"] * 10 + x[key][\"PositionY\"]);\n                  break;\n                case \"B_Rook\":\n                  B_Rook.push(x[key][\"PositionX\"] * 10 + x[key][\"PositionY\"]);\n                  break;\n                case \"W_Rook\":\n                  W_Rook.push(x[key][\"PositionX\"] * 10 + x[key][\"PositionY\"]);\n                  break;\n                case \"B_Knight\":\n                  B_Knight.push(x[key][\"PositionX\"] * 10 + x[key][\"PositionY\"]);\n                  break;\n                case \"W_Knight\":\n                  W_Knight.push(x[key][\"PositionX\"] * 10 + x[key][\"PositionY\"]);\n                  break;\n                case \"B_King\":\n                  B_King = x[key][\"PositionX\"] * 10 + x[key][\"PositionY\"];\n                  break;\n                case \"W_King\":\n                  W_King = x[key][\"PositionX\"] * 10 + x[key][\"PositionY\"];\n                  break;\n                case \"B_Queen\":\n                  B_Queen.push(x[key][\"PositionX\"] * 10 + x[key][\"PositionY\"]);\n                  break;\n                case \"W_Queen\":\n                  W_Queen.push(x[key][\"PositionX\"] * 10 + x[key][\"PositionY\"]);\n                  break;\n              }\n            }\n          }\n          var wr = 0;\n          var br = 0;\n          var wk = 0;\n          var bk = 0;\n          var wb = 0;\n          var bb = 0;\n          var wp = 0;\n          var bp = 0;\n          var wq = 0;\n          var bq = 0;\n          if (W_Queen.length >= 2) {\n            for (let i = 0; i < W_Queen.length - 1; i++) {\n              iniboard.pieces.push(new Piece(new Position(-1, -1), PieceType.QUEEN, TeamType.OUR, true));\n            }\n          }\n          if (B_Queen.length >= 2) {\n            for (let i = 0; i < B_Queen.length - 1; i++) {\n              iniboard.pieces.push(new Piece(new Position(-1, -1), PieceType.QUEEN, TeamType.OPPONENT, true));\n            }\n          }\n          if (B_Knight.length >= 3) {\n            for (let i = 0; i < B_Knight.length - 2; i++) {\n              iniboard.pieces.push(new Piece(new Position(-1, -1), PieceType.KNIGHT, TeamType.OPPONENT, true));\n            }\n          }\n          if (B_Rook.length >= 3) {\n            for (let i = 0; i < B_Rook.length - 2; i++) {\n              iniboard.pieces.push(new Piece(new Position(-1, -1), PieceType.ROOK, TeamType.OPPONENT, true));\n            }\n          }\n          if (B_Bishop.length >= 3) {\n            for (let i = 0; i < B_Bishop.length - 2; i++) {\n              iniboard.pieces.push(new Piece(new Position(-1, -1), PieceType.BISHOP, TeamType.OPPONENT, true));\n            }\n          }\n          if (W_Knight.length >= 3) {\n            for (let i = 0; i < W_Knight.length - 2; i++) {\n              iniboard.pieces.push(new Piece(new Position(-1, -1), PieceType.KNIGHT, TeamType.OUR, true));\n            }\n          }\n          if (W_Rook.length >= 3) {\n            for (let i = 0; i < W_Rook.length - 2; i++) {\n              iniboard.pieces.push(new Piece(new Position(-1, -1), PieceType.ROOK, TeamType.OUR, true));\n            }\n          }\n          if (W_Bishop.length >= 3) {\n            for (let i = 0; i < W_Bishop.length - 2; i++) {\n              iniboard.pieces.push(new Piece(new Position(-1, -1), PieceType.BISHOP, TeamType.OUR, true));\n            }\n          }\n          for (const p of iniboard.pieces) {\n            if (p.team == 'W') {\n              if (p.type == 'Rook') {\n                p.position.updateposition((W_Rook[wr] - W_Rook[wr] % 10) / 10, W_Rook[wr] % 10);\n                wr++;\n              } else if (p.type == 'Knight') {\n                p.position.updateposition((W_Knight[wk] - W_Knight[wk] % 10) / 10, W_Knight[wk] % 10);\n                wk++;\n              } else if (p.type == 'Bishop') {\n                p.position.updateposition((W_Bishop[wb] - W_Bishop[wb] % 10) / 10, W_Bishop[wb] % 10);\n                wb++;\n              } else if (p.type == 'Pawn') {\n                p.position.updateposition((W_Pawn[wp] - W_Pawn[wp] % 10) / 10, W_Pawn[wp] % 10);\n                wp++;\n              } else if (p.type == 'King') {\n                p.position.updateposition((W_King - W_King % 10) / 10, W_King % 10);\n              } else if (p.type == 'Queen') {\n                p.position.updateposition((W_Queen[wq] - W_Queen[wq] % 10) / 10, W_Queen[wq] % 10);\n                wq++;\n              }\n            } else {\n              if (p.type == 'Rook') {\n                p.position.updateposition((B_Rook[br] - B_Rook[br] % 10) / 10, B_Rook[br] % 10);\n                br++;\n              } else if (p.type == 'Knight') {\n                p.position.updateposition((B_Knight[bk] - B_Knight[bk] % 10) / 10, B_Knight[bk] % 10);\n                bk++;\n              } else if (p.type == 'Bishop') {\n                p.position.updateposition((B_Bishop[bb] - B_Bishop[bb] % 10) / 10, B_Bishop[bb] % 10);\n                bb++;\n              } else if (p.type == 'Pawn') {\n                p.position.updateposition((B_Pawn[bp] - B_Pawn[bp] % 10) / 10, B_Pawn[bp] % 10);\n                bp++;\n              } else if (p.type == 'King') {\n                p.position.updateposition((B_King - B_King % 10) / 10, B_King % 10);\n              } else if (p.type == 'Queen') {\n                p.position.updateposition((B_Queen[bq] - B_Queen[bq] % 10) / 10, B_Queen[bq] % 10);\n                bq++;\n              }\n            }\n          }\n          iniboard.calculateAllMoves();\n          setIsLoaded(true);\n        }\n      } catch (error) {\n        console.error('Error running script:', error);\n      }\n    };\n    ExpressScript();\n  }, []);\n  const [board, setBoard] = useState(iniboard);\n  const [promotionPawn, setPromotionPawn] = useState();\n  const modalRef = useRef(null);\n  const checkmateModalRef = useRef(null);\n  const Restart = async () => {\n    try {\n      var _checkmateModalRef$cu;\n      const response = await axios.post('https://chess-40-backend.onrender.com/restart');\n      // console.log('Output:', response.data);\n      (_checkmateModalRef$cu = checkmateModalRef.current) === null || _checkmateModalRef$cu === void 0 ? void 0 : _checkmateModalRef$cu.classList.add(\"hidden\");\n      setBoard(initialBoard.clone());\n      window.location.reload();\n    } catch (error) {\n      console.error('Error running script:', error);\n    }\n  };\n  function playMove(playedPiece, destination) {\n    var _playedPiece$possible;\n    // console.log(playedPiece.possibleMoves);\n    // If the playing piece doesn't have any moves return\n    if (playedPiece.possibleMoves === undefined) return 0;\n\n    // Prevent the inactive team from playing\n    if (playedPiece.team === TeamType.OUR && board.totalTurns % 2 !== 1) return 0;\n    if (playedPiece.team === TeamType.OPPONENT && board.totalTurns % 2 !== 0) return 0;\n    let playedMoveIsValid = false;\n    let turn = 0;\n    const validMove = (_playedPiece$possible = playedPiece.possibleMoves) === null || _playedPiece$possible === void 0 ? void 0 : _playedPiece$possible.some(m => m.samePosition(destination));\n    if (!validMove) return 0;\n    const enPassantMove = isEnPassantMove(playedPiece.position, destination, playedPiece.type, playedPiece.team);\n    playedMoveIsValid = enPassantMove || validMove;\n    // playMove modifies the board thus we\n    // need to call setBoard\n    setBoard(() => {\n      const clonedBoard = board.clone();\n      clonedBoard.totalTurns += 1;\n      turn = clonedBoard.totalTurns;\n      // Playing the move\n      playedMoveIsValid = clonedBoard.playMove(enPassantMove, validMove, playedPiece, destination);\n      if (clonedBoard.winningTeam !== undefined) {\n        var _checkmateModalRef$cu2;\n        (_checkmateModalRef$cu2 = checkmateModalRef.current) === null || _checkmateModalRef$cu2 === void 0 ? void 0 : _checkmateModalRef$cu2.classList.remove(\"hidden\");\n      }\n      return clonedBoard;\n    });\n\n    // This is for promoting a pawn\n    let promotionRow = playedPiece.team === TeamType.OUR ? 7 : 0;\n    if (destination.y === promotionRow && playedPiece.isPawn) {\n      var _modalRef$current;\n      (_modalRef$current = modalRef.current) === null || _modalRef$current === void 0 ? void 0 : _modalRef$current.classList.remove(\"hidden\");\n      setPromotionPawn(previousPromotionPawn => {\n        const clonedPlayedPiece = playedPiece.clone();\n        clonedPlayedPiece.position = destination.clone();\n        return clonedPlayedPiece;\n      });\n    }\n    if (playedMoveIsValid) return 1;else return 0;\n  }\n  function isEnPassantMove(initialPosition, desiredPosition, type, team) {\n    const pawnDirection = team === TeamType.OUR ? 1 : -1;\n    if (type === PieceType.PAWN) {\n      if ((desiredPosition.x - initialPosition.x === -1 || desiredPosition.x - initialPosition.x === 1) && desiredPosition.y - initialPosition.y === pawnDirection) {\n        const piece = board.pieces.find(p => p.position.x === desiredPosition.x && p.position.y === desiredPosition.y - pawnDirection && p.isPawn && p.enPassant);\n        if (piece) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  //TODO\n  //Add stalemate!\n  function isValidMove(initialPosition, desiredPosition, type, team) {\n    let validMove = false;\n    switch (type) {\n      case PieceType.PAWN:\n        validMove = pawnMove(initialPosition, desiredPosition, team, board.pieces);\n        break;\n      case PieceType.KNIGHT:\n        validMove = knightMove(initialPosition, desiredPosition, team, board.pieces);\n        break;\n      case PieceType.BISHOP:\n        validMove = bishopMove(initialPosition, desiredPosition, team, board.pieces);\n        break;\n      case PieceType.ROOK:\n        validMove = rookMove(initialPosition, desiredPosition, team, board.pieces);\n        break;\n      case PieceType.QUEEN:\n        validMove = queenMove(initialPosition, desiredPosition, team, board.pieces);\n        break;\n      case PieceType.KING:\n        validMove = kingMove(initialPosition, desiredPosition, team, board.pieces);\n    }\n    return validMove;\n  }\n  async function promotePawn(pieceType) {\n    var _modalRef$current2;\n    if (promotionPawn === undefined) {\n      return;\n    }\n    const clonedBoard = board.clone();\n    let p;\n    if (clonedBoard) clonedBoard.pieces = clonedBoard.pieces.reduce((results, piece) => {\n      if (piece.samePiecePosition(promotionPawn)) {\n        p = piece;\n      }\n      return results;\n    }, []);\n    if (p) {\n      console.log(p, pieceType);\n      let url = `http://localhost:4000/upgradePawn?type=${p[\"team\"] + \"_\" + pieceType}&ix=${p[\"position\"][\"x\"]}&iy=${p[\"position\"][\"y\"]}`;\n      const response = await axios.get(url);\n    }\n    setBoard(() => {\n      const clonedBoard2 = board.clone();\n      clonedBoard2.pieces = clonedBoard2.pieces.reduce((results, piece) => {\n        if (piece.samePiecePosition(promotionPawn)) {\n          results.push(new Piece(piece.position.clone(), pieceType, piece.team, true));\n        } else {\n          results.push(piece);\n        }\n        return results;\n      }, []);\n      clonedBoard2.calculateAllMoves();\n      return clonedBoard2;\n    });\n    (_modalRef$current2 = modalRef.current) === null || _modalRef$current2 === void 0 ? void 0 : _modalRef$current2.classList.add(\"hidden\");\n  }\n  function promotionTeamType() {\n    return (promotionPawn === null || promotionPawn === void 0 ? void 0 : promotionPawn.team) === TeamType.OUR ? \"W\" : \"B\";\n  }\n  const handleReload = () => {\n    window.location.reload();\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal hidden\",\n      ref: modalRef,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => promotePawn(PieceType.ROOK),\n          src: `/Assets/Images/${promotionTeamType()}_Rook.png`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => promotePawn(PieceType.BISHOP),\n          src: `/Assets/Images/${promotionTeamType()}_Bishop.png`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => promotePawn(PieceType.KNIGHT),\n          src: `/Assets/Images/${promotionTeamType()}_Knight.png`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => promotePawn(PieceType.QUEEN),\n          src: `/Assets/Images/${promotionTeamType()}_Queen.png`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal hidden\",\n      ref: checkmateModalRef,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-body\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"checkmate-body\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"The winning team is \", board.winningTeam === TeamType.OUR ? \"white\" : \"black\", \"!\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: Restart,\n            children: \"Play again\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: Restart,\n      children: \"Restart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Chessboard, {\n      playMove: playMove,\n      pieces: board.pieces\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(Referee, \"NSKu64DsN2B8I7W6+vTQ+HSH2JE=\");\n_c = Referee;\nexport default Referee;\nvar _c;\n$RefreshReg$(_c, \"Referee\");","map":{"version":3,"names":["axios","React","useEffect","useRef","useState","initialBoard","Piece","Position","bishopMove","kingMove","knightMove","pawnMove","queenMove","rookMove","PieceType","TeamType","Chessboard","jsxDEV","_jsxDEV","Fragment","_Fragment","Referee","_s","iniboard","clone","isLoaded","setIsLoaded","ExpressScript","response","post","response2","t","data","updateTurns","x","W_Pawn","W_Bishop","W_Rook","W_Knight","W_King","W_Queen","B_Pawn","B_Bishop","B_Rook","B_Knight","B_King","B_Queen","key","Object","prototype","hasOwnProperty","call","push","wr","br","wk","bk","wb","bb","wp","bp","wq","bq","length","i","pieces","QUEEN","OUR","OPPONENT","KNIGHT","ROOK","BISHOP","p","team","type","position","updateposition","calculateAllMoves","error","console","board","setBoard","promotionPawn","setPromotionPawn","modalRef","checkmateModalRef","Restart","_checkmateModalRef$cu","current","classList","add","window","location","reload","playMove","playedPiece","destination","_playedPiece$possible","possibleMoves","undefined","totalTurns","playedMoveIsValid","turn","validMove","some","m","samePosition","enPassantMove","isEnPassantMove","clonedBoard","winningTeam","_checkmateModalRef$cu2","remove","promotionRow","y","isPawn","_modalRef$current","previousPromotionPawn","clonedPlayedPiece","initialPosition","desiredPosition","pawnDirection","PAWN","piece","find","enPassant","isValidMove","KING","promotePawn","pieceType","_modalRef$current2","reduce","results","samePiecePosition","log","url","get","clonedBoard2","promotionTeamType","handleReload","children","className","ref","onClick","src","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/animesh/Desktop/SummerDev/Chess-40/src/Components/Referee/referee.tsx"],"sourcesContent":["import axios from 'axios';\nimport React, { FC, useEffect, useRef, useState } from 'react';\nimport { initialBoard } from \"../../Constants\";\nimport { Piece, Position } from \"../../models\";\nimport { Board } from \"../../models/Board\";\nimport { Pawn } from \"../../models/Pawn\";\nimport { bishopMove, getPossibleBishopMoves, getPossibleKingMoves, getPossibleKnightMoves, getPossiblePawnMoves, getPossibleQueenMoves, getPossibleRookMoves, kingMove, knightMove, pawnMove, queenMove, rookMove } from \"../../Referee/rules/\";\nimport { PieceType, TeamType } from \"../../Types\";\nimport Chessboard from \"../Chessboard/chessboard\";\n\nconst Referee: FC = () => {\n    var iniboard = initialBoard.clone();\n    const [isLoaded, setIsLoaded] = useState(false);\n    \n    useEffect(()=>{\n        const ExpressScript = async () => {\n            try {\n                const response = await axios.post('https://chess-40-backend.onrender.com/chess');\n                const response2 = await axios.post('https://chess-40-backend.onrender.com/turn');\n                let t = response2.data[0][\"Turn\"];\n                t*=2;\n                if(t%4) t--;\n                iniboard.updateTurns(t+1);\n                if(response.data){\n                    let x = response.data;\n                    var W_Pawn: number[] = [];\n                    var W_Bishop: number[] = [];\n                    var W_Rook: number[] = [];\n                    var W_Knight: number[] = [];\n                    var W_King: number = -1;\n                    var W_Queen: number[] = [];\n                    var B_Pawn: number[] = [];\n                    var B_Bishop: number[] = [];\n                    var B_Rook: number[] = [];\n                    var B_Knight: number[] = [];\n                    var B_King: number = -1;\n                    var B_Queen: number[] = [];\n                    for (const key in x) {\n                        if (Object.prototype.hasOwnProperty.call(x, key)) {\n                            switch (x[key][\"Element\"]) {\n                                case \"B_Pawn\":\n                                    B_Pawn.push((x[key][\"PositionX\"]*10)+x[key][\"PositionY\"]);\n                                    break;\n                                case \"W_Pawn\":\n                                    W_Pawn.push((x[key][\"PositionX\"]*10)+x[key][\"PositionY\"]);\n                                    break;\n                                case \"B_Bishop\":\n                                    B_Bishop.push((x[key][\"PositionX\"]*10)+x[key][\"PositionY\"]);\n                                    break;\n                                case \"W_Bishop\":\n                                    W_Bishop.push((x[key][\"PositionX\"]*10)+x[key][\"PositionY\"]);\n                                    break;\n                                case \"B_Rook\":\n                                    B_Rook.push((x[key][\"PositionX\"]*10)+x[key][\"PositionY\"]);\n                                    break;\n                                case \"W_Rook\":\n                                    W_Rook.push((x[key][\"PositionX\"]*10)+x[key][\"PositionY\"]);\n                                    break;\n                                case \"B_Knight\":\n                                    B_Knight.push((x[key][\"PositionX\"]*10)+x[key][\"PositionY\"]);\n                                    break;\n                                case \"W_Knight\":\n                                    W_Knight.push((x[key][\"PositionX\"]*10)+x[key][\"PositionY\"]);\n                                    break;\n                                case \"B_King\":\n                                    B_King= (x[key][\"PositionX\"]*10)+x[key][\"PositionY\"];\n                                    break;\n                                case \"W_King\":\n                                    W_King= (x[key][\"PositionX\"]*10)+x[key][\"PositionY\"];\n                                    break;\n                                case \"B_Queen\":\n                                    B_Queen.push((x[key][\"PositionX\"]*10)+x[key][\"PositionY\"]);\n                                    break;\n                                case \"W_Queen\":\n                                    W_Queen.push((x[key][\"PositionX\"]*10)+x[key][\"PositionY\"]);\n                                    break;\n                            }\n                        }\n                    }\n                    var wr=0;\n                    var br=0;\n                    var wk=0;\n                    var bk=0;\n                    var wb=0;\n                    var bb=0;\n                    var wp=0;\n                    var bp=0;\n                    var wq=0;\n                    var bq=0;\n                    if(W_Queen.length>=2){\n                        for(let i=0;i<(W_Queen.length-1);i++){\n                            iniboard.pieces.push(new Piece(new Position(-1,-1),PieceType.QUEEN,\n                            TeamType.OUR, true));\n                        }\n                    }\n                    if(B_Queen.length>=2){\n                        for(let i=0;i<(B_Queen.length-1);i++){\n                            iniboard.pieces.push(new Piece(new Position(-1,-1),PieceType.QUEEN,\n                            TeamType.OPPONENT, true));\n                        }\n                    }\n                    if(B_Knight.length>=3){\n                        for(let i=0;i<(B_Knight.length-2);i++){\n                            iniboard.pieces.push(new Piece(new Position(-1,-1),PieceType.KNIGHT,\n                            TeamType.OPPONENT, true));\n                        }\n                    }\n                    if(B_Rook.length>=3){\n                        for(let i=0;i<(B_Rook.length-2);i++){\n                            iniboard.pieces.push(new Piece(new Position(-1,-1),PieceType.ROOK,\n                            TeamType.OPPONENT, true));\n                        }\n                    }\n                    if(B_Bishop.length>=3){\n                        for(let i=0;i<(B_Bishop.length-2);i++){\n                            iniboard.pieces.push(new Piece(new Position(-1,-1),PieceType.BISHOP,\n                            TeamType.OPPONENT, true));\n                        }\n                    }\n                    if(W_Knight.length>=3){\n                        for(let i=0;i<(W_Knight.length-2);i++){\n                            iniboard.pieces.push(new Piece(new Position(-1,-1),PieceType.KNIGHT,\n                            TeamType.OUR, true));\n                        }\n                    }\n                    if(W_Rook.length>=3){\n                        for(let i=0;i<(W_Rook.length-2);i++){\n                            iniboard.pieces.push(new Piece(new Position(-1,-1),PieceType.ROOK,\n                            TeamType.OUR, true));\n                        }\n                    }\n                    if(W_Bishop.length>=3){\n                        for(let i=0;i<(W_Bishop.length-2);i++){\n                            iniboard.pieces.push(new Piece(new Position(-1,-1),PieceType.BISHOP,\n                            TeamType.OUR, true));\n                        }\n                    }\n                    for (const p of iniboard.pieces) {\n                        if(p.team=='W'){\n                            if(p.type=='Rook') {p.position.updateposition((W_Rook[wr]-W_Rook[wr]%10)/10,W_Rook[wr]%10);wr++}\n                            else if(p.type=='Knight') {p.position.updateposition((W_Knight[wk]-W_Knight[wk]%10)/10,W_Knight[wk]%10);wk++}\n                            else if(p.type=='Bishop') {p.position.updateposition((W_Bishop[wb]-W_Bishop[wb]%10)/10,W_Bishop[wb]%10);wb++}\n                            else if(p.type=='Pawn') {p.position.updateposition((W_Pawn[wp]-W_Pawn[wp]%10)/10,W_Pawn[wp]%10);wp++}\n                            else if(p.type=='King') {p.position.updateposition((W_King-W_King%10)/10,W_King%10);}\n                            else if(p.type=='Queen') {p.position.updateposition((W_Queen[wq]-W_Queen[wq]%10)/10,W_Queen[wq]%10);wq++}\n                        }\n                        else{\n                            if(p.type=='Rook') {p.position.updateposition((B_Rook[br]-B_Rook[br]%10)/10,B_Rook[br]%10);br++}\n                            else if(p.type=='Knight') {p.position.updateposition((B_Knight[bk]-B_Knight[bk]%10)/10,B_Knight[bk]%10);bk++}\n                            else if(p.type=='Bishop') {p.position.updateposition((B_Bishop[bb]-B_Bishop[bb]%10)/10,B_Bishop[bb]%10);bb++}\n                            else if(p.type=='Pawn') {p.position.updateposition((B_Pawn[bp]-B_Pawn[bp]%10)/10,B_Pawn[bp]%10);bp++}\n                            else if(p.type=='King') {p.position.updateposition((B_King-B_King%10)/10,B_King%10);}\n                            else if(p.type=='Queen') {p.position.updateposition((B_Queen[bq]-B_Queen[bq]%10)/10,B_Queen[bq]%10);bq++}\n                        }\n                    }\n                    iniboard.calculateAllMoves();\n                    setIsLoaded(true);\n                }\n            } catch (error) {\n                console.error('Error running script:', error);\n            }\n        };\n        ExpressScript();\n    },[])\n\n    const [board, setBoard] = useState<Board>(iniboard);\n    const [promotionPawn, setPromotionPawn] = useState<Piece>();\n    const modalRef = useRef<HTMLDivElement>(null);\n    const checkmateModalRef = useRef<HTMLDivElement>(null);\n\n    const Restart = async () => {\n        try {\n            const response = await axios.post<{ output: string, error: string }>('https://chess-40-backend.onrender.com/restart');\n            // console.log('Output:', response.data);\n            checkmateModalRef.current?.classList.add(\"hidden\");\n            setBoard(initialBoard.clone());\n            window.location.reload();\n        } catch (error) {\n            console.error('Error running script:', error);\n        }\n    };\n    function playMove(playedPiece: Piece, destination: Position): number {\n        // console.log(playedPiece.possibleMoves);\n        // If the playing piece doesn't have any moves return\n        if (playedPiece.possibleMoves === undefined) return 0;\n\n        // Prevent the inactive team from playing\n        if (playedPiece.team === TeamType.OUR\n            && board.totalTurns % 2 !== 1) return 0;\n        if (playedPiece.team === TeamType.OPPONENT\n            && board.totalTurns % 2 !== 0) return 0;\n\n        let playedMoveIsValid = false;\n        let turn=0;\n\n        const validMove = playedPiece.possibleMoves?.some(m => m.samePosition(destination));\n\n        if (!validMove) return 0;\n\n        const enPassantMove = isEnPassantMove(\n            playedPiece.position,\n            destination,\n            playedPiece.type,\n            playedPiece.team\n        );\n\n        playedMoveIsValid = enPassantMove || validMove;\n        // playMove modifies the board thus we\n        // need to call setBoard\n        setBoard(() => {\n            const clonedBoard = board.clone();\n            clonedBoard.totalTurns += 1;\n            turn = clonedBoard.totalTurns;\n            // Playing the move\n            playedMoveIsValid = clonedBoard.playMove(enPassantMove,\n                validMove, playedPiece,\n                destination);\n\n            if (clonedBoard.winningTeam !== undefined) {\n                checkmateModalRef.current?.classList.remove(\"hidden\");\n            }\n\n            return clonedBoard;\n        })\n\n        // This is for promoting a pawn\n        let promotionRow = (playedPiece.team === TeamType.OUR) ? 7 : 0;\n\n        if (destination.y === promotionRow && playedPiece.isPawn) {\n            modalRef.current?.classList.remove(\"hidden\");\n            setPromotionPawn((previousPromotionPawn) => {\n                const clonedPlayedPiece = playedPiece.clone();\n                clonedPlayedPiece.position = destination.clone();\n                return clonedPlayedPiece;\n            });\n        }\n        if(playedMoveIsValid) return 1;\n        else return 0;\n    }\n\n    function isEnPassantMove(\n        initialPosition: Position,\n        desiredPosition: Position,\n        type: PieceType,\n        team: TeamType\n    ) {\n        const pawnDirection = team === TeamType.OUR ? 1 : -1;\n\n        if (type === PieceType.PAWN) {\n            if (\n                (desiredPosition.x - initialPosition.x === -1 ||\n                    desiredPosition.x - initialPosition.x === 1) &&\n                desiredPosition.y - initialPosition.y === pawnDirection\n            ) {\n                const piece = board.pieces.find(\n                    (p) =>\n                        p.position.x === desiredPosition.x &&\n                        p.position.y === desiredPosition.y - pawnDirection &&\n                        p.isPawn &&\n                        (p as Pawn).enPassant\n                );\n                if (piece) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    //TODO\n    //Add stalemate!\n    function isValidMove(initialPosition: Position, desiredPosition: Position, type: PieceType, team: TeamType) {\n        let validMove = false;\n        switch (type) {\n            case PieceType.PAWN:\n                validMove = pawnMove(initialPosition, desiredPosition, team, board.pieces);\n                break;\n            case PieceType.KNIGHT:\n                validMove = knightMove(initialPosition, desiredPosition, team, board.pieces);\n                break;\n            case PieceType.BISHOP:\n                validMove = bishopMove(initialPosition, desiredPosition, team, board.pieces);\n                break;\n            case PieceType.ROOK:\n                validMove = rookMove(initialPosition, desiredPosition, team, board.pieces);\n                break;\n            case PieceType.QUEEN:\n                validMove = queenMove(initialPosition, desiredPosition, team, board.pieces);\n                break;\n            case PieceType.KING:\n                validMove = kingMove(initialPosition, desiredPosition, team, board.pieces);\n        }\n\n        return validMove;\n    }\n\n    async function promotePawn(pieceType: PieceType) {\n        if (promotionPawn === undefined) {\n            return;\n        }\n        const clonedBoard = board.clone();\n        let p;\n        if(clonedBoard) clonedBoard.pieces = clonedBoard.pieces.reduce((results, piece) => {\n            if (piece.samePiecePosition(promotionPawn)){\n                p=piece;\n            }\n            return results;\n        }, [] as Piece[]);\n        if(p){\n            console.log(p,pieceType);\n            let url = `http://localhost:4000/upgradePawn?type=${p[\"team\"]+\"_\"+pieceType}&ix=${p[\"position\"][\"x\"]}&iy=${p[\"position\"][\"y\"]}`;\n            const response = await axios.get<{ output: string, error: string }>(url);\n        }\n        setBoard(() => {\n            const clonedBoard2 = board.clone();\n            clonedBoard2.pieces = clonedBoard2.pieces.reduce((results, piece) => {\n                if (piece.samePiecePosition(promotionPawn)) {\n                    results.push(new Piece(piece.position.clone(), pieceType,\n                        piece.team, true));\n                } else {\n                    results.push(piece);\n                }\n                return results;\n            }, [] as Piece[]);\n            clonedBoard2.calculateAllMoves();\n            return clonedBoard2;\n        });\n\n        modalRef.current?.classList.add(\"hidden\");\n    }\n\n    function promotionTeamType() {\n        return (promotionPawn?.team === TeamType.OUR) ? \"W\" : \"B\";\n    }\n\n    const handleReload = () => {\n        window.location.reload();\n      };\n    return (\n        <>\n            <div className=\"modal hidden\" ref={modalRef}>\n                <div className=\"modal-body\">\n                    <img onClick={() => promotePawn(PieceType.ROOK)} src={`/Assets/Images/${promotionTeamType()}_Rook.png`} />\n                    <img onClick={() => promotePawn(PieceType.BISHOP)} src={`/Assets/Images/${promotionTeamType()}_Bishop.png`} />\n                    <img onClick={() => promotePawn(PieceType.KNIGHT)} src={`/Assets/Images/${promotionTeamType()}_Knight.png`} />\n                    <img onClick={() => promotePawn(PieceType.QUEEN)} src={`/Assets/Images/${promotionTeamType()}_Queen.png`} />\n                </div>\n            </div>\n            <div className=\"modal hidden\" ref={checkmateModalRef}>\n                <div className=\"modal-body\">\n                    <div className=\"checkmate-body\">\n                        <span>The winning team is {board.winningTeam === TeamType.OUR ? \"white\" : \"black\"}!</span>\n                        <button onClick={Restart}>Play again</button>\n                    </div>\n                </div>\n            </div>\n            <button onClick={Restart}>Restart</button>\n            <Chessboard playMove={playMove}\n                pieces={board.pieces} />\n        </>\n    )\n}\n\nexport default Referee;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}